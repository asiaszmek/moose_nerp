EP project:
NOT NEEDED 1. try another opt with smaller window for AHP (after GP opt finished)
2. create 3 different time tables - Str,GPe, STN, and update  connection probability to be realistic
3. edit connect.py to allow specification of spatial location - see how NetPynne does it, update dictionary keys?
DONE   a. create_synpath_array: add another entry - distance to soma
       add one entry per SynPerComp - which is now difference between NumSyn and existing synapses
          syncomps.append([syncomp.path,dist])
NEEDED: do not add synapses to axon, or add them but somehow indicate they are axon?
DONE   b. update ext_connect to use
   #postsyn_fraction=None, half_dist=None, steep=none,mindist=0,maxdist=1 (units are meters)
   #require either fraction or half_dist, default steep=1 if half_dist defined

   c. update select_entry and connect_timetable to use choice and probability and distance_range
   i.e., eliminate select_entry!
DONE     replicate entries according to NumSyn
DONE     calculate probability at each location/branch
       prob=0 if dist<mindist
       prob=1 if dist>maxdist
       if half_dist defined:
       	  prob=dist^steep/(dist^steep+half_dist^steep), make steep<0 to switch slope
DONE       	  recalc probabilities as choice_prob=prob/sum(prob)
	if postsyn_fraction:
	      choice_prob=1/total_syn) inside range
DONE      num_choices=np.int(np.round(totalsyn*postsyn_fraction))
DONE      syn_choices=np.random.choice(syncomp_subset,size=num_choices,replace=false)

DONE selection of timetable still uses select_entry because
     the table of tt entries with number of times to be used is the only place that keeps track of which tts have been used,
     because the set of time tables is for the entire network
modify create_synpath_array:
DONE	prior to each set of connections (after :  for pretype in post_connections[syntype].keys():), generate list from available connections
DONE	name is full path to synhandler, cross-reference with number of allowed synapses vs distance
DONE	i.e., SynPerComp = (distance_mapping - sh.synapse.num)
DONE:	need to create sh when creating synchan, in addoneSynChan in syn_proto.py

################## STILL TO DO:
intrinsic will be similarly modified to use np.random.choice
DONE   store list of pre-cells (spikegens) where connect<prob, length=
DONE   syn_choices=np.random.choice(syncomp_subset,size=min(num_pre_cell_spikegens,length(syncomps)),replace=false)
NEEDED: test dend_loc=something for intrinsic connections
NEEDED: test allow multiple connections between a pair of pre and post-syn neurons

##################
ISSUES:
new create_model_sim functions do put EVERYTHING under model.  It does simplify returns, but makes code less clear.
We do not want user to have to read the create_model_sim code to see how things are working.  By returning a few things, it is more clear
I would prefer to return tables from setupOutput, possible collected under Output variable to simplify
I would prefer to return the pulsegenerator as pg
And, I would prefer to keep param_sim not under model

Bigger issue: need for net.num_inject to override current injection specification in param_sim.py
even bigger issue: by setting up hsolve in setupNeurons, network creation (varying channel conductance) fails

####################
Then, update __main__.py in network simulations to use create_model_sim as much as possible
